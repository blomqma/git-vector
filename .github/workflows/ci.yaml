name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  linters:
    name: "Linters"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: "Install Poetry"
        uses: Gr1N/setup-poetry@v8

      - name: "Load cached venv"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: "Install dependencies"
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: "Set VENV variable"
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then 
            echo "VENV=$(poetry env info -p)\\Scripts\\activate" >> $GITHUB_ENV
          else 
            echo "VENV=$(poetry env info -p)/bin/activate" >> $GITHUB_ENV
          fi
        shell: bash

      - name: "Run linters"
        run: |
          source "$VENV"
          isort --check-only --diff . 
          flake8 .
          black --check --diff .

  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: "Install Poetry"
        uses: Gr1N/setup-poetry@v8

      - name: "Build the wheel"
        run: poetry build

      - name: "Install from the wheel"
        run: pip install dist/*.whl

  tests:
    name: "Tests"
    needs: [linters, build]
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    defaults:
      run:
        shell: bash
    runs-on: ${{ matrix.os }}
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v3

      - name: "Set up Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: "Install Poetry"
        uses: Gr1N/setup-poetry@v8

      - name: "Load cached venv"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}

      - name: "Install dependencies"
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-root

      - name: "Install the package"
        run: poetry install

      - name: "Set VENV variable"
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then 
            echo "VENV=$(poetry env info -p)\\Scripts\\activate" >> $GITHUB_ENV
          else 
            echo "VENV=$(poetry env info -p)/bin/activate" >> $GITHUB_ENV
          fi
        shell: bash

      - name: "Run type-checking"
        run: |
          source "$VENV"
          mypy .

      - name: "Run tests"
        run: |
          source "$VENV"
          pytest --verbose --cov=. --cov-report=xml .

      - name: "Upload coverage"
        if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b # v2.1.0
        with:
          files: coverage.xml
